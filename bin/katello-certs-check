#!/usr/bin/env ruby
require 'kafo/store'
require 'clamp'

Clamp do

  def self.store
    @store ||= Kafo::Store.new('/etc/foreman-installer/store.d')
  end

  self.description = "Verifies, that custom ssl cert files are usable " \
    "as part of the #{store.get(:katello_server_name)} installation."

  option ["-c", "--cert"], "CERT_FILE", "path to certificate", :required => true
  option ["-k", "--key"], "KEY_FILE", "path to key", :required => true
  option ["-r", "--req"], "REQ_FILE", "path to certificate request"
  option ["-b", "--bundle"], "CA_BUNDLE_FILE", "path to CA bundle", :required => true

  def success
    puts "[OK]"
  end

  def error(current_exit_code, message)
    puts "[FAIL]"
    @exit_code = current_exit_code if @exit_code == 0
    STDERR.puts message
  end

  def show_details
    print "Validating the certificate "
    system("openssl x509 -noout -subject -in #{cert}")
  end

  def check_priv_key
    print "Check private key matches the certificate: "
    cert_mod = `openssl x509 -noout -modulus -in "#{cert}" 2>&1`
    key_mod = `openssl rsa -noout -modulus -in "#{key}" 2>&1`
    if cert_mod == key_mod
      success
    else
      puts "The #{key} does not match the #{cert}"
      error(2, "Cert modulus: #{cert_mod}\nKey modulus: #{key_mod}")
    end
  end

  def check_ca_bundle
      print "Check ca bundle verifies the cert file: "
      result = system("openssl verify -CAfile #{bundle} -purpose sslserver -verbose #{cert} 2>&1 > /dev/null")
      if result
          success
      else
          puts "The #{bundle} does not verify the #{cert}"
          error(4, `openssl verify -CAfile "#{bundle}" -purpose sslserver -verbose "#{cert}" 2>&1`)
      end
  end

  def store
    self.class.store
  end

  def success_message
    return <<EOF
Validation succeeded.

    To install the #{store.get(:katello_server_name)} main server with the custom certificates, run:

        #{store.get(:installer_name)} --scenario #{store.get(:katello_installer_scenario)}\\
                          --certs-server-cert "#{cert}"\\
                          --certs-server-cert-req "#{req}"\\
                          --certs-server-key "#{key}"\\
                          --certs-server-ca-cert "#{bundle}"

    To update the certificates on a currently running #{store.get(:katello_server_name)} installation, run:

        #{store.get(:installer_name)} --scenario #{store.get(:katello_installer_scenario)}\\
                          --certs-server-cert "#{cert}"\\
                          --certs-server-cert-req "#{req}"\\
                          --certs-server-key "#{key}"\\
                          --certs-server-ca-cert "#{bundle}"\\
                          --certs-update-server --certs-update-server-ca

    To use them inside a \$CAPSULE, run this command INSTEAD:

        capsule-certs-generate --capsule-fqdn "$CAPSULE"\\
                          --certs-tar  "~/$CAPSULE-certs.tar"\\
                          --server-cert "#{cert}"\\
                          --server-cert-req "#{req}"\\
                          --server-key "#{key}"\\
                          --server-ca-cert "#{bundle}"\\
                          --certs-update-server
EOF
  end

  def execute
    @exit_code = 0
    show_details
    check_priv_key
    check_ca_bundle

    puts success_message if @exit_code == 0
    exit(@exit_code)
  end
end
